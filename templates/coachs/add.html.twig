{% extends 'base.html.twig' %}

{% block title %}Add Coach with Training Sessions{% endblock %}
{% block body %}
    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <style>
            .past-session { background-color: gray; }
            .today-session { background-color: yellow; }
            .future-session { background-color: green; }
        </style>
    </head>
    <div class="container mt-5">
        <h1>Add Coach with Training Sessions</h1>

        {{ form_start(form) }}

        <div class="mb-3">
            <label for="coach" class="form-label">Coach</label>
            {{ form_row(form.coach, {'attr': {'class': 'form-control'}}) }}
        </div>

        <div class="mb-3">
            <label class="form-label">Training Sessions</label>
            <div data-prototype="{{ form_widget(form.trainingDates.vars.prototype)|e }}">
                {% for trainingDate in form.trainingDates %}
                    <div class="input-group mb-3 training-session-field">
                        {{ form_widget(trainingDate, {'attr': {'class': 'form-control training-date'}}) }}
                    </div>
                {% endfor %}
            </div>
            <button type="button" class="btn btn-primary add-training-session">Add Training Session</button>
        </div>

        <div class="mb-3">
            {{ form_row(form.save, {'attr': {'class': 'btn btn-success', 'id': 'save-button'}}) }}
        </div>

        {{ form_end(form) }}

        <script>
            // JavaScript to dynamically add new training date fields
            document.querySelector('.add-training-session').addEventListener('click', function() {
                const container = document.querySelector('[data-prototype]');
                const prototype = container.getAttribute('data-prototype');
                const newIndex = container.children.length;

                const newField = prototype.replace(/__name__/g, newIndex);

                const trashButton = `<button type="button" class="btn btn-danger remove-training-session" id="remove-training-session-${newIndex}">
                            <i class="fas fa-trash-alt"></i> Remove
                        </button>`;

                const newFieldWithTrash = `<div class="input-group mb-3 training-session-field">` + newField + trashButton + `</div>`;

                container.insertAdjacentHTML('beforeend', newFieldWithTrash);

                enableSaveButton();
                attachRemoveButtons();
                applyColorToSessions(); // Apply colors to new field
            });

            // JavaScript to remove training date fields
            document.addEventListener('click', function(event) {
                if (event.target && event.target.classList.contains('remove-training-session')) {
                    const fieldToRemove = event.target.closest('.input-group');
                    if (fieldToRemove) {
                        fieldToRemove.remove();
                        enableSaveButton();
                    }
                }
            });

            // Enable the "Save" button if all training date fields have values
            function enableSaveButton() {
                const allDates = document.querySelectorAll('input[type=datetime-local]');
                let allFilled = true;

                allDates.forEach(i => {
                    if (!i.value) {
                        allFilled = false;
                    }
                });

                const saveButton = document.querySelector('#save-button');
                saveButton.disabled = !allFilled;
            }

            // Attach event listeners to remove buttons
            function attachRemoveButtons() {
                document.querySelectorAll('.remove-training-session').forEach(function(button) {
                    button.addEventListener('click', function(event) {
                        const fieldToRemove = event.target.closest('.input-group');
                        if (fieldToRemove) {
                            fieldToRemove.remove();
                            enableSaveButton();
                        }
                    });
                });
            }

            // Function to apply color based on date status
            function applyColorToSessions() {
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Reset to start of day for accurate comparison

                document.querySelectorAll('.training-date').forEach(function(input) {
                    const sessionDate = new Date(input.value);
                    sessionDate.setHours(0, 0, 0, 0); // Compare with only the date part

                    if (input.value) {
                        if (sessionDate < today) {
                            input.classList.add('past-session');
                        } else if (sessionDate.getTime() === today.getTime()) {
                            input.classList.add('today-session');
                        } else {
                            input.classList.add('future-session');
                        }
                    }

                    // Update color on date change
                    input.addEventListener('change', applyColorToSessions);
                });
            }

            // Initial check on page load
            enableSaveButton();
            attachRemoveButtons();
            applyColorToSessions();

            // Optional: If form is submitted, ensure it's valid
            document.querySelector('form').addEventListener('submit', function(event) {
                if (document.getElementById('save-button').disabled) {
                    event.preventDefault();
                    alert('Please fill in all training session dates!');
                }
            });
        </script>
    </div>
{% endblock %}
